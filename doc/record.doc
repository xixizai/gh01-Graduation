【github noxim里面的odd-even路由似乎也是最小路由。。为什么要分奇偶呢（知道是避免死锁的同时扩大路径多样性，但是是怎么做到的？）】

×路由算法：
  ××维序路由
  ××无关路由
  ××自适应路由算法（Routing4.5）【重点】
    一种更复杂的路由算法是可以自适应的，即一个消息可以根据网络流量情况选择从A到B的路径。
    本地或全局信息可以被利用来进行自适应路由的决策。自适应路由算法往往依赖于本地路由器信息，比如队列占用和排队延迟等信息，来衡量交通拥堵并选择链接。
    ×××奇偶转弯模型路由（Routing4.5.1）【如果被应用了就是大重点】
       奇偶转弯模型路由[39]提出了是否消除一组两个的转弯将根据取决于当前节点是在奇数列还是偶数列。例如，当一个数据包经过一个在偶数列的节点时，由东转向北和由北转向西的转弯被禁止。由于这种的限制，奇偶转弯模型通过禁止180°转弯（？）达到了无死锁。奇偶转弯模型比其他转弯模型算法如西向优先算法提供了更好的自适应性。使用西向优先算法，若从在目的地西向的源地址出发，就没有了灵活性；使用奇偶路由，就可以灵活性地根据给定的列所允许的转弯。

    ×××4个方向4种优先转弯（from me乱想的）：
       d.x>s.x(c.x):west-first;
       d.x<s.x(c.x):east-first;
       d.x=s.x(c.x):
                    d.y>s.y(c.y):south-first;
                    d.y<s.y(c.y):north-first;

*选择策略：
  ××random
  ××DBL
  ××ACO【大重点】

×实现：基于结点表格（Routing4.6.2）
    在每一跳使用路由表存储一个数据包应该采取的到达特定目的地的输出链接。通过在每一跳访问路由信息（而不是都在源结点访问），不仅可以实现自适应算法，还可以利用每一跳的网络拥塞信息来做出决策。




【实验结果分析】
×输入：
  ××均匀的：
    1、路由算法：X-Y路由
    2、路由算法：奇偶转弯模型路由
       选择策略：①random；②DBL；③ACO
     
  ××非均匀的：
    ×××规则热点：
       1、路由算法：X-Y路由
       2、路由算法：奇偶转弯模型路由
          选择策略：①random；②DBL；③ACO
    ×××非规则热点：
       1、路由算法：X-Y路由
       2、路由算法：奇偶转弯模型路由
          选择策略：①random；②DBL；③ACO

【在一个clk内，若每个组合逻辑的各部分都最多只会得到一次激励，则可以确定结果不会被覆盖。对本电路：要保证一个周期内可完成电路过程。】

